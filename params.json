{"name":"0install","tagline":"One package for every OS","body":"# 0install\r\n\r\n0install is the last package manager you'll ever need:\r\n* One package works on OS X, most Linux distros, Windows, and more.\r\n* Get automatic updates on all platforms.\r\n* Release software and updates immediately. There's no delay getting into any central repo.\r\n\r\n----\r\n\r\n0install can install programs from built in catalogs, or from any site.\r\n```sh\r\n$ 0install add rox-edit\r\n$ rox-edit\r\n$ 0install add http://0install.de/feeds/Audacity.xml # no central repo needed\r\n$ audacity\r\n```\r\nTODO This assumes support for short names is ported from the windows version to everywhere.\r\n\r\n----\r\n\r\nThere's also a GUI.\r\n\r\nTODO screenshots from http://0install.net/user-guide-shortcuts.html.\r\n\r\nTODO I think that the command line and gui worlds should be unified if they're not. \"0install add\", AddApp, and the gui manager should all set up gui shortcuts and add the program to $PATH by default. If not, we have to explain the differences and I bet people will be confused. Hell, I'd be confused :-)\r\n\r\n----\r\n\r\n0install puts everything in /var/cache/0install.net/, other than the launch scripts and desktop shortcuts. It won't step on any of your other software or interfere with any other package manager.\r\n\r\n----\r\n\r\nIt's easy to create your own 0install packages. Let's package SCons, a build system written in python.\r\n```sh\r\n$ mkdir 0install-scons && cd 0install-scons\r\n$ 0install add 0publish http://0install.net/2006/interfaces/0publish\r\n$ export EDITOR=nano # if your EDITOR environment variable isn't already set.\r\n$ 0publish SCons.xml # The file name shouldn't have a version number.\r\n```\r\nTODO We can reduce onboarding friction by making 0publish a subcommand of 0install so they don't have to install something else. I guess the down side is that 0publish gets a little bigger for everyone.\r\n\r\nType \"Y\" to create the file. It should open in your editor. Fill in the **summary**, **description**, **homepage**, and the **main** program (in this case, scons.py). The final version should look like:\r\n```xml\r\n<?xml version=\"1.0\" ?>\r\n<?xml-stylesheet type='text/xsl' href='http://0install.net/2006/stylesheets/interface.xsl'?>\r\n\r\n<interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\">\r\n  <name>SCons</name>\r\n  <summary>a software construction tool</summary>\r\n  <description>\r\nSCons is a software construction tool (build tool substitute for Make)\r\n...\r\n  </description>\r\n  <homepage>http://www.scons.org/</homepage>\r\n  <group main=\"scons.py\">\r\n    <implementation id=\".\" version=\"0.1\" released='Snapshot'/>\r\n  </group>\r\n</interface>\r\n```\r\nSave to the default file and exit your editor.\r\n\r\n```sh\r\n$ 0publish Scons.xml \\\r\n  --set-version=0.96.92 \\\r\n  --stable \\ # if this is a stable release (the default is testing)\r\n  --set-released=today \\\r\n  --archive-url=http://heanet.dl.sourceforge.net/sourceforge/scons/scons-local-0.96.92.tar.gz\r\n```\r\n\r\nDecide where you'll put the package. Programs will depend on this so it should be somewhere that won't change. You might put it on your site, like https://example.com/0install/SCons.xml, or you might keep it in revisions control, like:\r\n```sh\r\n$ export PACKAGE_URL=https://github.com/scons/scons/master/Scons.xml\r\n$ 0publish Scons.xml --set-interface-uri=\"$PACKAGE_URL\"\r\n\r\n$ gpg --gen-key # if you don't have one. You just need name and email address.\r\n$ 0publish SCons.xml --xmlsign\r\n```\r\nFinally, upload or push SCons.xml and your GPG public key to the same directory.\r\n\r\nAll done! Now anyone can run it:\r\n```sh\r\n$ 0install add my-cool-scons $PACKAGE_URL\r\n$ my-cool-scons --version\r\n```\r\n\r\nIf you want to make manual changes to the package, use\r\n```sh\r\n0publish Scons.xml --edit\r\n```\r\nwhich will validate and re-sign the file when you save.\r\n\r\nWhen you release a new version:\r\n```sh\r\n$ 0publish SCons.xml \\\r\n  --add-version=1.0 \\ # instead of --set-version above\r\n  --stable \\ # or not\r\n  --set-released=today \\\r\n  --archive-url=http://heanet.dl.sourceforge.net/sourceforge/scons/scons-local-1.0.tar.gz\r\n```\r\n\r\n----\r\n\r\nThere's also a gui for creating packages.\r\n```sh\r\n$ 0install add 0publish-gui http://0install.net/2007/interfaces/0publish-gui.xml\r\n$ 0publish-gui\r\n```\r\nTODO replace with screenshots of gui-only workflow.\r\n\r\n----\r\n\r\nThere's lots more good stuff under the hood.\r\n* There are no side effects: libraries never conflict and you can install multiple versions of a program.\r\n* 0install can install programs without admin access.\r\n* 0install works with source and binary releases (although source releases need one more step to install).\r\n* 0install will use dependencies installed by many other packaging systems, including rpm, apt, and homebrew.\r\n* We're working on a security sandbox so users can use programs without giving them access to everything the user can access.\r\n\r\n\r\n# Install\r\n* OS X: ```brew update && brew install 0install```\r\n* Debian / Ubuntu / Mint: ```sudo apt-get install zeroinstall-injector```\r\n* Fedora: ```sudo yum install 0install```\r\n* [Windows](http://downloads.sourceforge.net/project/zero-install/0install/1.14/zero-install-1.14.2.exe)\r\n* [And more](http://0install.net/injector.html)\r\n\r\n\r\n# Packaging Other Kinds of Programs\r\nTODO something that gets built\r\n\r\nTODO from a .deb or .rpm\r\n\r\nTODO others?\r\n\r\n# More Info\r\n[0install Site](http://0install.net/doc.html)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}